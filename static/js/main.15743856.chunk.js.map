{"version":3,"sources":["fetchs/fetchCovid19TimeLine.js","components/Case.js","components/Cases.js","components/Chart1.js","components/Chart2.js","components/WilayaCases.js","components/Wilaya.js","configs/db.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["fetchCasesStats","a","fetch","request","json","response","fetchTimeLine","fetchWilayaCases","Case","props","className","caseClass","caseTitle","loader","id","caseCount","connect","state","ownProps","country","casesState","cases","recovered","critical","deaths","todayCases","todayDeaths","active","casesPerOneMillion","dispatch","setCases","data","useState","caseTag","setCaseTag","useEffect","then","rs","dataObj","type","body","casesClass","casesTitle","casesCount","newData","Object","entries","map","key","i","setTimeLine","statsDataConfirmed","columns","forEach","date","confirmed","push","class","timeLineArrayConfirmed","timeLineRecoveredDied","setCasesRecoveredDeaths","WilayaCases","wilayaName","wilayaCases","percentage","Wilaya","items","setItems","dataElements","item","length","d2","wilayat","Cas_confirm","db","Dexie","version","stores","topics","open","Boolean","window","location","hostname","match","initState","rootReducer","action","console","log","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15743856.chunk.js","sourcesContent":["\nexport const fetchCasesStats= async ()=>{\n  const request= await fetch('https://coronavirus-19-api.herokuapp.com/countries/algeria')\n  const response= await request.json();\n\n\treturn response;\n}\n\n\nexport const fetchTimeLine = async ()=>{\n\tconst request = await fetch('https://pomber.github.io/covid19/timeseries.json');\n\tconst response = await request.json();\n\n\treturn response;\n}\n\nexport const fetchWilayaCases = async ()=>{\n\tconst request = await fetch('https://bitbucket.org/algcovid/covid19-alg/raw/2e8099ee9f5c91640cfbcc07b5b8f85be1235fa7/covid19-Wilayat-all.json');\n\tconst response = await request.json();\n\n\treturn response;\n}\n","import React from 'react'\n\nfunction Case(props){\n\n\treturn(\n\t\t<div className={'case ' + props.caseClass}>\n\t\t\t<h2>{props.caseTitle}</h2>\n\t\t\t{(props.loader) ? <div id='loader'></div> :<p>{props.caseCount}</p>}\n\t\t</div>\n\t)\n}\n\nexport default(Case)\n","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\n\nimport {fetchCasesStats} from './../fetchs/fetchCovid19TimeLine'\nimport Case from './Case'\n\nfunction Cases (props){\n\n\tconst [caseTag, setCaseTag] = useState();\n\n\tuseEffect(()=>{\n   \tfetchCasesStats().then(rs=>{\n\t\t\tconst dataObj = {\n\t\t\t\tcountry: rs.country,\n    \t\tcasesState: {\n      \t\tcases: rs.cases,\n      \t\trecovered: rs.recovered,\n      \t\tcritical: rs.critical,\n      \t\tdeaths: rs.deaths,\n      \t\ttodayCases: rs.todayCases,\n      \t\ttodayDeaths: rs.todayDeaths\n    \t\t},\n    \t\tactive: rs.active,\n    \t\tcasesPerOneMillion: rs.casesPerOneMillion\n\t\t\t}\n\t\t\tprops.setCases({type: 'setCases', body: dataObj})\n\t\t\tprops.setCases({type: 'setLoaderOff', body: false})\n\t\t});\n\t},[])\n\n\tuseEffect(()=>{\n\t\tconst casesClass = ['case-total', 'case-recovered', 'case-died', 'case-today', 'case-today-deaths', 'case-critical']\n\t\tconst casesTitle = ['مجمل الحالات','حالات الشفاء','حالات الموت','حالات اليوم','توفي اليوم','حالات حرجة']\n\t\tconst casesCount = [props.casesState.cases, props.casesState.recovered,props.casesState.deaths,props.casesState.todayCases,props.casesState.todayDeaths,props.casesState.critical]\n\n\t\tconst newData = Object.entries(props.casesState).map((key, i)=>{\n\t\t\treturn <Case key={i} loader={props.loader} caseClass={casesClass[i]} caseTitle={casesTitle[i]} caseCount={casesCount[i]} />\n\t\t})\n\t\tsetCaseTag(newData)\n\t}, [props.casesState])\n\n  return(\n    <div id='cases-container'>\n      {caseTag}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n\n\treturn {\n\t\tcountry: state.country,\n       casesState: {\n \t    \t cases: state.casesState.cases,\n         recovered: state.casesState.recovered,\n         critical: state.casesState.critical,\n         deaths: state.casesState.deaths,\n         todayCases: state.casesState.todayCases,\n         todayDeaths: state.casesState.todayDeaths\n       },\n       active: state.active,\n       casesPerOneMillion: state.casesPerOneMillion,\n\t\t\t loader: state.loader\n\t}\n}\n\nconst mapActionToProps = (dispatch)=>{\n\treturn {\n\t\tsetCases: (data)=>{dispatch(data)}\n\t}\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(Cases)\n","import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport C3Chart from \"react-c3js\";\nimport \"c3/c3.css\";\n\nimport {fetchTimeLine} from './../fetchs/fetchCovid19TimeLine';\n\nfunction Chart1(props){\n\n\tuseEffect(()=>{\n\t\tfetchTimeLine().then((rs)=>{\n      let statsDataConfirmed = {columns: [['حالات مؤكدة']]};\n      rs['Algeria'].forEach(({date, confirmed, recovered, deaths})=>{\n        statsDataConfirmed.columns[0].push(confirmed)\n      })\n\t\t\tprops.setTimeLine({type: 'setTimeLine', body: statsDataConfirmed})\n\t\t})\n\t},[])\n\n\treturn(\n\t\t<div class='chart-container'>\n\t\t\t<C3Chart data={props.timeLineArrayConfirmed}/>\n\t\t</div>\n\t)\n\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n\treturn{\n\t\tsetTimeLine: (data)=>{dispatch(data)}\n\t}\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n\treturn state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart1)\n","import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport C3Chart from 'react-c3js'\nimport 'c3/c3.css'\n\nfunction Chart2(props){\n\n\tconst PieChart = ({data})=>\n\t\t<C3Chart data={{json: data, type: 'pie'}} />;\n\n\tuseEffect(()=>{\n//\t\tprops.setCasesRecoveredDeaths({type: 'setRecoveredDeaths', body: {recovered: [props.recovered], deaths: [props.deaths]}})\n\t},[props.recovered])\n\n\treturn(\n\t\t<div class='chart-container'>\n\t\t\t<PieChart data={props.timeLineRecoveredDied} />\n\t\t</div>\n\t)\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n\treturn {\n\t\ttimeLineRecoveredDied : state.timeLineRecoveredDied,\n\t\trecovered: state.casesState.recovered,\n\t\tdeaths: state.casesState.deaths\n\t}\n}\n\nconst mapActionToProps = (dispatch)=>{\n\treturn {setCasesRecoveredDeaths: (data)=>{dispatch(data)}}\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(Chart2)\n","import React from 'react'\n\nfunction WilayaCases(props){\n\n\treturn(\n\t\t<div className='wilaya'>\n      <p className='wilaya-name'>{props.wilayaName}</p>\n      <p className='wilaya-cases'>{props.wilayaCases}</p>\n      <p className='wilaya-percentage'>{props.percentage}</p>\n    </div>\n\t)\n}\n\nexport default(WilayaCases)\n","import React, {useState, useEffect} from 'react'\n\nimport {fetchWilayaCases} from '../fetchs/fetchCovid19TimeLine'\nimport WilayaCases from './WilayaCases'\n\nfunction  Wilaya(){\n\n\tconst [items, setItems] = useState()\n\n\tuseEffect(()=>{\n\n\t\tfetchWilayaCases().then(rs=>{\n\t\t\tconst dataElements = Object.entries(rs).map(item=>{\n\t\t\t\tfor(var i = 0; i < item[1].length; ++i){\n\t\t\t\t\tvar d2 = <WilayaCases key={i} wilayaName={item[1][i].wilayat} wilayaCases={item[1][i].Cas_confirm} percentage={'0%'} />\n\t\t\t\t}\n\t\t\t\treturn d2\n\t\t\t})\n\t\t\tsetItems(dataElements)\n\t\t})\n\n\t}, [])\n\n\treturn(\n\t\t<div id='wilaya-container'>\n\t\t\t<div id='wilaya-container-header'>\n\t\t\t\t<p>إسم  الولاية</p>\n\t\t\t\t<p>عدد الإصابات</p>\n\t\t\t\t<p>نسبة الإصابات</p>\n\t\t\t</div>\n\t\t\t{items}\n\t\t</div>\n\t)\n\n}\n\nexport default(Wilaya)\n","import Dexie from 'dexie'\n\nvar db = new Dexie('Topics')\n\ndb.version(1).stores({\n  topics: \"++id, title, body, parent\"\n})\n\ndb.open();\n\nexport default(db)\n","import React from 'react'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nimport './App.css'\nimport Cases from './components/Cases'\nimport Chart1 from './components/Chart1'\nimport Chart2 from './components/Chart2'\nimport Wilaya from './components/Wilaya'\nimport db from './configs/db'\n\nfunction App(props){\n\n  return(\n    <div>\n\t\t\t<div id='header'>\n\t  \t\t<h1>إحصائيات فيروس كورونا في<span> {props.country}</span>\n\t\t\t\t</h1>\n\t  \t\t<p></p>\n\t\t\t</div>\n\t\t\t<Cases />\n\t\t\t<h3>دائرة بيانية لحالات الشفاء/الوفاة</h3>\n\t\t\t<Chart2 />\n\t\t\t<h3>منحنى تطور الحالات المصابة</h3>\n\t\t\t<Chart1 />\n\t\t\t<h3>الحالات المصابة حسب الولايات</h3>\n\t\t\t<Wilaya />\n    </div>\n  )\n\n}\n\nconst mapStateToProps= (state, ownProps)=>{\n\treturn state;\n}\n\nexport default connect(mapStateToProps)(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n\t\tcountry: 'Algeria',\n\t\tcasesState: {\n\t\t\tcases: 0,\n\t\t\trecovered: 0,\n\t\t\tcritical: 0,\n    \tdeaths: 0,\n    \ttodayCases: 0,\n    \ttodayDeaths: 0\n\t\t},\n\t\tactive: 0,\n    casesPerOneMillion: 0,\n\t\ttimeLineArrayConfirmed: {columns: [[\"حالات مؤكدة\", 10, 10, 10, 10, 10, 10]]},\n\t\ttimeLineRecoveredDied: {'نسبة الشفاء': [61],\n      \t\t\t\t\t\t\t\t\t\t  'نسبة الموت': [86]},\n\t\tloader: true\n}\n\n\nconst rootReducer = (state = initState, action)=>{\n\n\tconsole.log(action)\n\n\tswitch (action.type){\n\t\tcase 'setCases':\n    \treturn {...state, ...action.body}\n\t\t\tbreak;\n\t\tcase 'setTimeLine':\n\t\t\treturn {...state, timeLineArrayConfirmed: action.body}\n\t\t\tbreak;\n\t\tcase 'setLoaderOff':\n\t\t\treturn {...state, loader: false}\n\t\t\tbreak;\n\t\tcase 'setRecoveredDeaths':\n\t\t\treturn {...state, timeLineRecoveredDied: action.body}\n\t\t\tbreak;\n\t}\n\treturn state\n}\n\nexport default(rootReducer)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from'./reducers/rootReducer'\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>,document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}