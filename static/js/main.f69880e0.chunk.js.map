{"version":3,"sources":["fetchs/fetchCovid19TimeLine.js","components/Cases.js","components/Chart1.js","configs/db.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["fetchCasesStats","a","fetch","request","json","response","fetchTimeLine","connect","state","ownProps","country","cases","active","casesPerOneMillion","recovered","critical","deaths","todayCases","todayDeaths","loader","dispatch","setCases","data","props","useEffect","then","rs","type","body","id","className","console","log","setTimeLine","statsDataConfirmed","columns","forEach","date","confirmed","push","timeLineArrayConfirmed","db","Dexie","version","stores","topics","open","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f69880e0.chunk.js","sourcesContent":["\nexport const fetchCasesStats= async ()=>{\n  const request= await fetch('https://coronavirus-19-api.herokuapp.com/countries/algeria')\n  const response= await request.json();\n\n\treturn response;\n}\n\n\nexport const fetchTimeLine = async ()=>{\n\tconst request = await fetch('https://pomber.github.io/covid19/timeseries.json');\n\tconst response = await request.json();\n\n\treturn response;\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\n\nimport {fetchCasesStats} from './../fetchs/fetchCovid19TimeLine'\n\nfunction Cases (props){\n\n\tuseEffect(()=>{\n   \tfetchCasesStats().then(rs=>{\n\t\t\tprops.setCases({type: 'setCases', body: rs})\n\t\t\tprops.setCases({type: 'setLoaderOff', body: false})\n\t\t});\n\t},[])\n\n  return(\n    <div id='cases-container'>\n      <div className='case case-total'>\n\t\t\t\t<h2>مجمل الحالات</h2>\n\t\t\t\t{(props.loader) ? <div id='loader'></div> : <p>{props.cases}</p>}\n      </div>\n      <div className='case case-recovered'>\n\t\t\t\t<h2>حالات الشفاء</h2>\n        {(props.loader) ? <div id='loader'></div> :<p>{props.recovered}</p>}\n      </div>\n      <div className='case case-died'>\n\t\t\t\t<h2>حالات الموت</h2>\n        {(props.loader) ? <div id='loader'></div> :<p>{props.deaths}</p>}\n      </div>\n\t\t\t<div className='case case-today'>\n        <h2>حالات اليوم</h2>\n        {(props.loader) ? <div id='loader'></div> :<p>{props.todayCases}</p>}\n      </div>\n\t\t\t<div className='case case-today-deaths'>\n        <h2>توفي اليوم</h2>\n        {(props.loader) ? <div id='loader'></div> :<p>{props.todayDeaths}</p>}\n      </div>\n\t\t\t<div className='case case-critical'>\n        <h2>حالات حرجة</h2>\n        {(props.loader) ? <div id='loader'></div> :<p>{props.critical}</p>}\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n  //console.log(state);\n\treturn {\n\t\t\tcountry: state.country,\n    \tcases: state.cases,\n    \tactive: state.active,\n    \tcasesPerOneMillion: state.casesPerOneMillion,\n    \trecovered: state.recovered,\n    \tcritical: state.critical,\n    \tdeaths: state.deaths,\n    \ttodayCases: state.todayCases,\n    \ttodayDeaths: state.todayDeaths,\n\t\t\tloader: state.loader\n\t}\n}\n\nconst mapActionToProps = (dispatch)=>{\n\treturn {\n\t\tsetCases: (data)=>{dispatch(data)}\n\t}\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(Cases)\n","import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport C3Chart from \"react-c3js\";\nimport \"c3/c3.css\";\n\nimport {fetchTimeLine} from './../fetchs/fetchCovid19TimeLine';\n\nfunction Chart1(props){\n\n\tuseEffect(()=>{\n\t\tfetchTimeLine().then((rs)=>{\n      let statsDataConfirmed = {columns: [['confirmed']]};\n      rs['Algeria'].forEach(({date, confirmed, recovered, deaths})=>{\n        statsDataConfirmed.columns[0].push(confirmed)\n      })\n\t\t\tprops.setTimeLine({type: 'setTimeLine', body: statsDataConfirmed})\n\t\t})\n\t},[])\n\n\treturn(\n\t\t<C3Chart data={props.timeLineArrayConfirmed}/>\n\t)\n\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n\treturn{\n\t\tsetTimeLine: (data)=>{dispatch(data)}\n\t}\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n\tconsole.log(state)\n\treturn state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart1)\n","import Dexie from 'dexie'\n\nvar db = new Dexie('Topics')\n\ndb.version(1).stores({\n  topics: \"++id, title, body, parent\"\n})\n\ndb.open();\n\nexport default(db)\n","import React from 'react'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nimport './App.css'\nimport Cases from './components/Cases'\nimport Chart1 from './components/Chart1'\nimport db from './configs/db'\n\nfunction App(props){\n\n\t//console.log(props)\n\n  return(\n    <div>\n\t\t\t<div id='header'>\n\t  \t\t<h1>إحصائيات فيروس كورونا في<span> {props.country}</span>\n\t\t\t\t</h1>\n\t  \t\t<p></p>\n\t\t\t</div>\n\t\t\t<Cases />\n\t\t\t<Chart1 />\n    </div>\n  )\n\n}\n\nconst mapStateToProps= (state, ownProps)=>{\n\treturn state;\n}\n\nexport default connect(mapStateToProps)(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n\t\tcountry: 'Algeria',\n\t\tcases: 0,\n\t\tactive: 0,\n\t\tcasesPerOneMillion: 0,\n\t\trecovered: 0,\n\t\tcritical: 0,\n    deaths: 0,\n    todayCases: 0,\n    todayDeaths: 0,\n\t\ttimeLineArrayConfirmed: {columns: [[\"confirmed\", 0, 10, 10, 10, 10, 10]]},\n\t\tloader: true\n}\n\n\nconst rootReducer = (state = initState, action)=>{\n\n\tconsole.log(action)\n\n\tswitch (action.type){\n\t\tcase 'setCases':\n    \treturn {...state, ...action.body}\n\t\t\tbreak;\n\t\tcase 'setTimeLine':\n\t\t\treturn {...state, timeLineArrayConfirmed: action.body}\n\t\t\tbreak;\n\t\tcase 'setLoaderOff':\n\t\t\treturn {...state, loader: false}\n\t\t\tbreak;\n\t}\n\treturn state\n}\n\nexport default(rootReducer)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from'./reducers/rootReducer'\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>,document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}